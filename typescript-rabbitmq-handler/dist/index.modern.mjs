import n from"amqplib";class e{constructor(n,e){this.connection=void 0,this.channel=void 0,this.connection=n,this.channel=e}static async create(t){const c=await n.connect(t),a=await c.createChannel();return process.once("SIGINT",async function(){await a.close(),await c.close()}),console.log("Connected to RabbitMQ"),new e(c,a)}async connect(e){var t=this;try{this.connection=await n.connect(e),this.channel=await this.connection.createChannel(),process.once("SIGINT",async function(){await t.channel.close(),await t.connection.close()}),console.log("Connected to RabbitMQ")}catch(n){console.warn(n)}}async startListening(n,e){if(this.channel)try{await this.channel.assertQueue(n,{durable:!1}),await this.channel.consume(n,async function(n){if(n){const t=n.content.toString();console.log(t);const c=JSON.parse(t);await e(c)}},{noAck:!0}),console.log(` [*] Listening for messages in queue ${n}`)}catch(n){console.warn(n)}else console.warn("RabbitMQ channel is not initialized.")}async sendMessageToQueue(n,e){if(this.channel)try{await this.channel.assertQueue(n,{durable:!1});const t=JSON.stringify(e);this.channel.sendToQueue(n,Buffer.from(t)),console.log(` [x] Sent to queue ${n}: ${t}`)}catch(n){console.warn(n)}else console.warn("RabbitMQ channel is not initialized.")}}export{e as default};
